import tkinter as tk
from tkinter import ttk
import sqlite3
import time
from datetime import date

conn = sqlite3.connect('libman.db')

# create table for item
cursor = conn.cursor()


# Create the ITEM table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS ITEM (
        Standard_No NVARCHAR(30) PRIMARY KEY,
        Publisher NVARCHAR(30),
        Publish_Date NVARCHAR(30),
        Author NVARCHAR(30),
        Title NVARCHAR(70),
        Item_Type NVARCHAR(30)
    )
''')

# CREATE GUI WINDOW
lmsGui = tk.Tk()
lmsGui.title("Library System Dashboard")
# SET GUI DIMENSIONS
lmsGui.geometry("900x550+250+100")


# GUI LIBRARY HEADER
def Header(lmsGui):
    fm = tk.Frame(lmsGui, height=500, width=900, bg='#fff')
    fm.place(x=0, y=0)
    fm2 = tk.Frame(lmsGui, bg='#00008B', height=80, width=900)
    fm2.place(x=0, y=0)
    lbb = tk.Label(lmsGui, bg='#00008B')
    lbb.place(x=15, y=5)
    ig = tk.PhotoImage(file='library.png')
    lbb.config(image=ig)
    lb3 = tk.Label(lmsGui, text='LIBRARY MATERIAL DASHBOARD', fg='#fff', bg='#00008B', font=('Arial', 30, 'bold'))
    lb3.place(x=125, y=17)
    return ig


# GUI DISPLAY CURRENT DATE
def Header2():
    dev = tk.Label(lmsGui, text="Developed by: De Omania | Del Rosario ", fg='black', bg='#fff',
                   font=('Arial', 10, 'bold'))
    dev.place(x=40, y=83)
    today = date.today()
    dat = tk.Label(lmsGui, text='Date : ', bg='#fff', fg='black', font=('Arial', 10, 'bold'))
    dat.place(x=740, y=83)
    dat2 = tk.Label(lmsGui, text=today, bg='#fff', fg='black', font=('Arial', 10, 'bold'))
    dat2.place(x=790, y=83)


# DISPLAY CLOCK
def clock(lb1_hr, lb3_hr, lb5_hr, lb7_hr):
    h = str(time.strftime("%H"))
    m = str(time.strftime("%M"))
    s = str(time.strftime("%S"))

    if int(h) >= 12 and int(m) >= 0:
        lb7_hr.config(text="PM")
        if int(h) > 12:
            h = int(h) - 12
            h = str(h)
    lb1_hr.config(text=h)
    lb3_hr.config(text=m)
    lb5_hr.config(text=s)
    lb1_hr.after(200, lambda: clock(lb1_hr, lb3_hr, lb5_hr, lb7_hr))


def dispClock():
    # DISPLAY HOURS
    lb1_hr = tk.Label(lmsGui, text='00', font=('times new roman', 20, 'bold'), bg='#cf0404', fg='white')
    lb1_hr.place(x=100, y=400, width=60, height=30)
    # DISPLAY MINUTES
    lb3_hr = tk.Label(lmsGui, text='00', font=('times new roman', 20, 'bold'), bg='#27db0f', fg='white')
    lb3_hr.place(x=170, y=400, width=60, height=30)
    # DISPLAY SECONDS
    lb5_hr = tk.Label(lmsGui, text='00', font=('times new roman', 20, 'bold'), bg='#06afd1', fg='white')
    lb5_hr.place(x=240, y=400, width=60, height=30)
    # DISPLAY AM/PM
    lb7_hr = tk.Label(lmsGui, text='AM', font=('times new roman', 17, 'bold'), bg='#2b1dff', fg='white')
    lb7_hr.place(x=310, y=400, width=60, height=30)
    clock(lb1_hr, lb3_hr, lb5_hr, lb7_hr)


# DISPLAY LIB IMAGE
def homescreenImage(lmsGui):
    canvas = tk.Canvas(lmsGui, bg='black', width=400, height=300)
    canvas.place(x=455, y=150)
    photo = tk.PhotoImage(file='bb.png')
    canvas.create_image(0, 0, image=photo, anchor=tk.NW)
    return photo


# FUNCTION TO INITIALIZE BUTTONS
def addLibMat(command):
    button = tk.Button(text='Add Material', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15,
                       command=command)
    button.place(x=40, y=180)


def remLibMat(command):
    button = tk.Button(text='Remove Material', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15,
                       command=command)
    button.place(x=240, y=180)


def dspLibMat(command):
    button = tk.Button(text='Display Material', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15,
                       command=command)
    button.place(x=40, y=250)


def borLibMat(command):
    button = tk.Button(text='Borrow Material', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15,
                       command=command)
    button.place(x=240, y=250)


def retLibMat(command):
    button = tk.Button(text='Return Material', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15,
                       command=command)
    button.place(x=40, y=320)


def logOut(command):
    button = tk.Button(text='Log Out', fg='#fff', bg='#006400', font=('Arial', 15, 'bold'), width=15, command=command)
    button.place(x=240, y=320)


# RE-DIRECT FRAME
def newFrame():
    addfm = tk.Frame(lmsGui, bg='#00008B', width=900, height=590)
    addfm.place(x=0, y=110)
    return addfm


# GO BACK TO HOMEPAGE
def goBack(homePage):
    go_back_button = tk.Button(homePage, text="Go Back", fg='#fff', bg='#FF0000', command=lambda: homePage.destroy())
    go_back_button.place(x=40, y=10)


def add_Item():
    addgui = newFrame()
    goBack(addgui)
    print("add item")

    ad = tk.Label(addgui, text='Standard Number:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    ad.place(x=130, y=50)
    data = tk.Entry(addgui, width=70, bg='white')
    data.place(x=290, y=50)
    ad1 = tk.Label(addgui, text='Publisher:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    ad1.place(x=130, y=100)
    data1 = tk.Entry(addgui, width=70, bg='white')
    data1.place(x=290, y=100)
    ad2 = tk.Label(addgui, text='Publish Date:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    ad2.place(x=130, y=150)
    data2 = tk.Entry(addgui, width=70, bg='white')
    data2.place(x=290, y=150)
    ad3 = tk.Label(addgui, text='Author:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    ad3.place(x=130, y=200)
    data3 = tk.Entry(addgui, width=70, bg='white')
    data3.place(x=290, y=200)
    ad4 = tk.Label(addgui, text='Title:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    ad4.place(x=130, y=250)
    data4 = tk.Entry(addgui, width=70, bg='white')
    data4.place(x=290, y=250)

    def select_item_type(event):
        member_type = member_type_combobox.get()
        if member_type == "Book":
            show_book_info(addgui)
        elif member_type == "Journal":
            show_journal_info(addgui)

    member_type_label = tk.Label(addgui, text="Item Type:", fg='#fff', bg='#00008B', font=('times new roman', 12))
    member_type_label.place(x=130, y=300)
    member_type_combobox = ttk.Combobox(addgui, values=["Book", "Journal"], state="readonly")
    member_type_combobox.place(x=290, y=300)
    member_type_combobox.bind("<<ComboboxSelected>>", select_item_type)

    def show_book_info(frame):
        edition_label = tk.Label(frame, text=' Edition:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        edition_label.place(x=130, y=350)
        edition_entry = tk.Entry(frame, width=70, bg='white')
        edition_entry.place(x=290, y=350)

        series_label = tk.Label(frame, text=' Series:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        series_label.place(x=130, y=400)
        series_entry = tk.Entry(frame, width=70, bg='white')
        series_entry.place(x=290, y=400)

    def show_journal_info(frame):
        volume_label = tk.Label(frame, text='Volume:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        volume_label.place(x=130, y=350)
        volume_entry = tk.Entry(frame, width=70, bg='white')
        volume_entry.place(x=290, y=350)

        issue_label = tk.Label(frame, text=' Issue: ', fg='#fff', bg='#00008B', font=('times new roman', 12))
        issue_label.place(x=130, y=400)
        issue_entry = tk.Entry(frame, width=70, bg='white')
        issue_entry.place(x=290, y=400)

    save_button = tk.Button(addgui, text="Save", fg='#fff', bg='#008000', font=('Arial', 10, 'bold'), width=10,
                            command=add_Item)
    save_button.place(x=750, y=350)


def remove_books():
    def remove_selected_materials():
        selected_items = tree.selection()
        for item in selected_items:
            values = tree.item(item)['values']
            standard_no = values[0]  # Standard_No of the selected material

            # Remove the material from the ITEM table
            conn.execute("DELETE FROM ITEM WHERE Standard_No = ?", (standard_no,))
            conn.commit()

            print("Material with Standard No", standard_no, "has been successfully removed")

            # Delete the material from the Treeview
            tree.delete(item)

    addgui = newFrame()
    goBack(addgui)
    print("Remove Books button clicked")

    # Create a Treeview widget
    tree = ttk.Treeview(addgui)
    tree.place(x=20, y=45, width=860, height=340)

    # Define columns
    tree["columns"] = ("Standard_No", "Publisher", "Publish_Date", "Author", "Title", "Item_Type")

    # Format columns
    tree.column("#0", width=0, stretch=tk.NO)
    tree.column("Standard_No", width=120, anchor=tk.CENTER)
    tree.column("Publisher", width=120, anchor=tk.CENTER)
    tree.column("Publish_Date", width=120, anchor=tk.CENTER)
    tree.column("Author", width=120, anchor=tk.CENTER)
    tree.column("Title", width=200, anchor=tk.W)
    tree.column("Item_Type", width=120, anchor=tk.CENTER)

    # Create headings
    tree.heading("#0", text="", anchor=tk.CENTER)
    tree.heading("Standard_No", text="Standard No", anchor=tk.CENTER)
    tree.heading("Publisher", text="Publisher", anchor=tk.CENTER)
    tree.heading("Publish_Date", text="Publish Date", anchor=tk.CENTER)
    tree.heading("Author", text="Author", anchor=tk.CENTER)
    tree.heading("Title", text="Title", anchor=tk.CENTER)
    tree.heading("Item_Type", text="Item Type", anchor=tk.CENTER)

    # Retrieve data from the ITEM table
    cursor = conn.execute("SELECT * FROM ITEM")

    # Display data in the table
    for row in cursor:
        tree.insert("", tk.END, values=row)

    # Scrollbar
    scrollbar = ttk.Scrollbar(addgui, orient="vertical", command=tree.yview)
    scrollbar.place(x=880, y=45, height=340)
    tree.configure(yscrollcommand=scrollbar.set)

    # Remove button
    remove_button = tk.Button(addgui, text="Remove", fg='#fff', bg='#8B0000', font=('Arial', 10, 'bold'), width=10,
                              command=remove_selected_materials)
    remove_button.place(x=430, y=391)


# FUNCTION TO SET BUTTON COMMANDS
def disp_books():
    def display_materials():
        # Create a Treeview widget
        tree = ttk.Treeview(addgui)
        tree.place(x=20, y=45, width=860, height=340)

        # Define columns
        tree["columns"] = ("Standard_No", "Publisher", "Publish_Date", "Author", "Title", "Item_Type")

        # Format columns
        tree.column("#0", width=0, stretch=tk.NO)
        tree.column("Standard_No", width=120, anchor=tk.CENTER)
        tree.column("Publisher", width=120, anchor=tk.CENTER)
        tree.column("Publish_Date", width=120, anchor=tk.CENTER)
        tree.column("Author", width=120, anchor=tk.CENTER)
        tree.column("Title", width=200, anchor=tk.W)
        tree.column("Item_Type", width=120, anchor=tk.CENTER)

        # Create headings
        tree.heading("#0", text="", anchor=tk.CENTER)
        tree.heading("Standard_No", text="Standard No", anchor=tk.CENTER)
        tree.heading("Publisher", text="Publisher", anchor=tk.CENTER)
        tree.heading("Publish_Date", text="Publish Date", anchor=tk.CENTER)
        tree.heading("Author", text="Author", anchor=tk.CENTER)
        tree.heading("Title", text="Title", anchor=tk.CENTER)
        tree.heading("Item_Type", text="Item Type", anchor=tk.CENTER)

        # Retrieve data from the database
        cursor = conn.execute("SELECT * FROM ITEM")

        # Display data in the table
        for row in cursor:
            tree.insert("", tk.END, values=row)

        # Scrollbar
        scrollbar = ttk.Scrollbar(addgui, orient="vertical", command=tree.yview)
        scrollbar.place(x=880, y=45, height=340)
        tree.configure(yscrollcommand=scrollbar.set)

    addgui = newFrame()
    goBack(addgui)
    print("Display Books button clicked")
    display_materials()


def borrow_books():
    addgui = newFrame()
    goBack(addgui)
    print("Borrow Books button clicked")

    # Member Details
    member_id_label = tk.Label(addgui, text="Member ID:", fg='#fff', bg='#00008B', font=('times new roman', 12))
    member_id_label.place(x=130, y=50)
    member_id_entry = tk.Entry(addgui, width=70, bg='white')
    member_id_entry.place(x=290, y=50)

    address_label = tk.Label(addgui, text='Address:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    address_label.place(x=130, y=100)
    address_entry = tk.Entry(addgui, width=70, bg='white')
    address_entry.place(x=290, y=100)

    contact_no_label = tk.Label(addgui, text='Contact No:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    contact_no_label.place(x=130, y=150)
    contact_no_entry = tk.Entry(addgui, width=70, bg='white')
    contact_no_entry.place(x=290, y=150)

    name_label = tk.Label(addgui, text='Name:', fg='#fff', bg='#00008B', font=('times new roman', 12))
    name_label.place(x=130, y=200)
    name_entry = tk.Entry(addgui, width=70, bg='white')
    name_entry.place(x=290, y=200)

    def select_member_type(event, frame=None):
        member_type = member_type_combobox.get()
        if member_type == "Student":
            show_student_info(addgui)
        elif member_type == "Faculty":
            show_faculty_info(addgui)

    member_type_label = tk.Label(addgui, text="Member Type:", fg='#fff', bg='#00008B', font=('times new roman', 12))
    member_type_label.place(x=130, y=250)
    member_type_combobox = ttk.Combobox(addgui, values=["Student", "Faculty"], state="readonly")
    member_type_combobox.place(x=290, y=250)
    member_type_combobox.bind("<<ComboboxSelected>>", select_member_type)

    def show_student_info(frame):
        year_level_label = tk.Label(frame, text=' Year Level:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        year_level_label.place(x=130, y=300)
        year_level_entry = tk.Entry(frame, width=70, bg='white')
        year_level_entry.place(x=290, y=300)

        course_label = tk.Label(frame, text='  Course:  ', fg='#fff', bg='#00008B', font=('times new roman', 12))
        course_label.place(x=130, y=350)
        course_entry = tk.Entry(frame, width=70, bg='white')
        course_entry.place(x=290, y=350)

    def show_faculty_info(frame):
        department_label = tk.Label(frame, text='Department:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        department_label.place(x=130, y=300)
        department_entry = tk.Entry(frame, width=70, bg='white')
        department_entry.place(x=290, y=300)

        profession_label = tk.Label(frame, text='Profession:', fg='#fff', bg='#00008B', font=('times new roman', 12))
        profession_label.place(x=130, y=350)
        profession_entry = tk.Entry(frame, width=70, bg='white')
        profession_entry.place(x=290, y=350)

    save_button = tk.Button(addgui, text="Save", fg='#fff', bg='#008000', font=('Arial', 10, 'bold'), width=10,
                            command=borrow_books)
    save_button.place(x=750, y=350)


def return_books():
    addgui = newFrame()
    goBack(addgui)
    print("Return Books button clicked")


def log_out():
    print("logout button clicked")


# MAIN
Banner = Header(lmsGui)
DateDev = Header2()
hsi = homescreenImage(lmsGui)
bt1 = addLibMat(add_Item)
bt2 = remLibMat(remove_books)
bt3 = dspLibMat(disp_books)
bt4 = borLibMat(borrow_books)
bt5 = retLibMat(return_books)
bt6 = logOut(log_out)
whatTime = dispClock()

# MAKE GUI VISIBLE
lmsGui.resizable(False, False)
lmsGui.mainloop()
